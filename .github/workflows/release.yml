name: Release

on: workflow_call

jobs:
  version:
    uses: ./.github/workflows/version.yml

  publish_nuget:
    if: ${{ github.event_name != 'pull_request' }}
    uses: ./.github/workflows/publish_nuget.yml
    secrets:
      SLEET_CONNECTIONSTRING: ${{ secrets.SLEET_CONNECTIONSTRING }}

  publish_npm:
    if: ${{ github.event_name != 'pull_request' }}
    uses: ./.github/workflows/publish_npm.yml
    needs: version
    with:
      path: sdks/typescript/entities
      version: ${{ needs.version.outputs.fullSemVer }}
    secrets:
      NPM_API_KEY: ${{ secrets.NPM_API_KEY }}

  publish_container:
    if: ${{ github.event_name != 'pull_request' }}
    uses: ./.github/workflows/publish_image.yml
    secrets:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

  release:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [version, publish_container, publish_npm]

    steps:
      - uses: actions/checkout@v4

      - name: Assets
        id: assets
        run: python ./.github/scripts/release_assets.py

      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const assets = JSON.parse('${{steps.assets.outputs.assets}}');

            const releaseResult = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ needs.version.outputs.fullSemVer }}',
              name: 'v${{ needs.version.outputs.fullSemVer }}',
              generate_release_notes: true,
              prerelease: false,
            });

            const release = releaseResult.data;

            assets.forEach(async a => await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: a.name,
              data: fs.readFileSync(a.path)
            }));
